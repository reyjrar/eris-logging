name    = eris
author  = Brad Lhotsky <brad@divisionbyzero.net>
license = BSD
copyright_holder = Brad Lhotsky
copyright_year   = 2015

[PruneCruft]
[MakeMaker]
[Manifest]

[ExecDir]
dir = bin

; Documentation
[PodWeaver]
[ContributorsFromGit]
[License]
[InsertCopyright]
[ReadmeMarkdownFromPod]
[CopyFilesFromBuild]
copy = README.mkdn
[MetaJSON]
[MetaConfig]
[MinimumPerl]

;Changelog
[ChangelogFromGit]
max_age         = 730
tag_regexp      = ^release-(\d.*)
file_name       = Changes
wrap_column     = 80
copy_to_root    = 0
exclude_message = ^(v\d\.\d|Archive|Merge pull request)

; Testing
[Test::EOL]
[PodCoverageTests]
[PodSyntaxTests]
[Test::Perl::Critic]
[Test::PodSpelling]
stopword = matcher
stopword = matchers
stopword = ElasticSearch
stopword = Suricata
stopword = CSV
stopword = Dedupes
stopword = DHCP
stopword = elasticsearch
stopword = fluentd
stopword = geo
stopword = MaxMind
stopword = Logstash
stopword = referer
stopword = suricata
stopword = syslog-ng
[Test::Compile]
fake_home = 1
[RunExtraTests]

; Prerequesites
[AutoPrereqs]
[CheckPrereqsIndexed]       ; ensure prereqs are on CPAN
[Prereqs / TestRequires]
Pod::Coverage::TrustPod		= 0
Test::Perl::Critic			= 0
; authordep Pod::Weaver::Section::Contributors
; authordep Pod::Weaver::Section::Support
; authordep Pod::Weaver::Section::Collect::FromOther
; authordep Pod::Elemental::Transformer::List
[Prereqs]
; Override Parse::Syslog::Line to 4.4+ for AutoDetectKeyValues
Parse::Syslog::Line = 4.4

; Git stuff
[Git::GatherDir]
exclude_filename = README.mkdn
exclude_filename = META.json
exclude_filename = Changes

[Git::NextVersion]  ; get version from last release tag
version_regexp = ^release-(.+)$
[OurPkgVersion]

[Git::Check]        ; ensure all files checked in
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = README.mkdn
allow_dirty = Maintenance.mkdn
allow_dirty = Searching.mkdn
allow_dirty = CopyIndexes.mkdn
allow_dirty = META.json

[GithubMeta]
issues = 1

; Commit handling / Release?
[ConfirmRelease]
[TestRelease]
[UploadToCPAN]
[Git::Commit / Commit_Dirty_Files]

[Git::Tag]
tag_format = release-%v

[NextRelease]

[Git::Commit / Commit_Changes] ; commit Changes (for new dev)

[Git::Push]         ; push repo to remote
push_to = origin
